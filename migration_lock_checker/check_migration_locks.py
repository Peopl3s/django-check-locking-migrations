#!/usr/bin/env python3
"""
Pre-commit hook –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü –≤ Django –º–∏–≥—Ä–∞—Ü–∏—è—Ö
–ë–õ–û–ö–ò–†–£–ï–¢ –∫–æ–º–º–∏—Ç –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ 2+ –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü
"""

import re
import sys
import argparse
import json
from pathlib import Path

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è pre-commit
DEFAULT_LARGE_TABLES = ['users', 'orders', 'payments', 'audit_logs', 'logs']
DEFAULT_MIN_TABLES = 2


def parse_arguments():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(
        description='Pre-commit hook: –ë–õ–û–ö–ò–†–£–ï–¢ –∫–æ–º–º–∏—Ç –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞—Ö 2+ –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü –≤ Django –º–∏–≥—Ä–∞—Ü–∏—è—Ö'
    )
    parser.add_argument(
        'filenames',
        nargs='*',
        help='–§–∞–π–ª—ã –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏'
    )
    parser.add_argument(
        '--tables', '-t',
        nargs='+',
        default=DEFAULT_LARGE_TABLES,
        help=f'–°–ø–∏—Å–æ–∫ –ë–û–õ–¨–®–ò–• —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {DEFAULT_LARGE_TABLES})'
    )
    parser.add_argument(
        '--app', '-a',
        type=str,
        help='–ò–º—è Django –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–Ω—ã—Ö –∏–º–µ–Ω —Ç–∞–±–ª–∏—Ü)'
    )
    parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥'
    )
    parser.add_argument(
        '--min-tables', '-m',
        type=int,
        default=DEFAULT_MIN_TABLES,
        help=f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü –¥–ª—è –ë–õ–û–ö–ò–†–û–í–ö–ò –∫–æ–º–º–∏—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {DEFAULT_MIN_TABLES})'
    )
    parser.add_argument(
        '--config', '-c',
        type=str,
        help='JSON —Ñ–∞–π–ª —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π'
    )
    parser.add_argument(
        '--strict', '-s',
        action='store_true',
        default=True,
        help='–°—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º - –ë–õ–û–ö–ò–†–û–í–ê–¢–¨ –∫–æ–º–º–∏—Ç –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º (–≤–∫–ª—é—á–µ–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)'
    )

    return parser.parse_args()


def load_config(config_path):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    if config_path and Path(config_path).exists():
        try:
            with open(config_path, 'r') as f:
                return json.load(f)
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_path}: {e}")
    return {}


def read_migration_file(file_path):
    """–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return f.read()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return None


def is_migration_file(file_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–µ–π Django"""
    path = Path(file_path)
    return (path.suffix == '.py' and
            'migrations' in path.parts and
            path.name != '__init__.py' and
            re.match(r'^\d{4}_.*\.py$', path.name))


def parse_django_migration_operations(content, tables, app_name=None, verbose=False):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ Django –º–∏–≥—Ä–∞—Ü–∏–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    """
    results = {
        'locked_tables': set(),
        'operations': [],
        'multiple_locks': False,
        'critical_risk': False,
        'migration_type': 'unknown',
        'locked_count': 0,
        'should_block_commit': False  # ‚ö†Ô∏è –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫–æ–º–º–∏—Ç–∞
    }

    if not content:
        return results

    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
    if 'RunPython' in content or 'RunSQL' in content:
        results['migration_type'] = 'data_migration'
    else:
        results['migration_type'] = 'schema_migration'

    # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π Django –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
    django_operations = {
        'CreateModel': 'CREATE TABLE',
        'DeleteModel': 'DROP TABLE',
        'RenameModel': 'RENAME TABLE',
        'AlterModelTable': 'ALTER TABLE',
        'AddField': 'ALTER TABLE (ADD COLUMN)',
        'RemoveField': 'ALTER TABLE (DROP COLUMN)',
        'AlterField': 'ALTER TABLE (ALTER COLUMN)',
        'RenameField': 'ALTER TABLE (RENAME COLUMN)',
        'AddIndex': 'CREATE INDEX',
        'RemoveIndex': 'DROP INDEX',
        'AddConstraint': 'ALTER TABLE (ADD CONSTRAINT)',
        'RemoveConstraint': 'ALTER TABLE (DROP CONSTRAINT)',
    }

    # –ü–æ–∏—Å–∫ –æ–ø–µ—Ä–∞—Ü–∏–π –º–∏–≥—Ä–∞—Ü–∏–∏
    for op_name, sql_op in django_operations.items():
        pattern = rf"{op_name}\(.*?name=['\"](.*?)['\"]"
        matches = re.finditer(pattern, content, re.DOTALL | re.IGNORECASE)

        for match in matches:
            model_name = match.group(1).lower()
            table_name = convert_model_to_table(model_name, app_name)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–∞ —Ç–∞–±–ª–∏—Ü–∞ –≤ —Å–ø–∏—Å–∫–µ –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü
            if table_name in [t.lower() for t in tables]:
                results['locked_tables'].add(table_name)
                results['operations'].append({
                    'django_operation': op_name,
                    'sql_operation': sql_op,
                    'model_name': model_name,
                    'table_name': table_name,
                    'description': f"{op_name} -> {sql_op}",
                    'risk_level': 'high' if sql_op in ['ALTER TABLE', 'DROP TABLE', 'CREATE INDEX'] else 'medium'
                })

    # –ê–Ω–∞–ª–∏–∑ RunSQL –æ–ø–µ—Ä–∞—Ü–∏–π
    sql_blocks = re.findall(r'RunSQL\s*\(.*?sql\s*=\s*(.*?)\).*?\)', content, re.DOTALL)
    for sql_block in sql_blocks:
        sql_text = extract_sql_from_runsql(sql_block)
        if sql_text:
            sql_results = analyze_raw_sql(sql_text, tables, verbose)
            results['locked_tables'].update(sql_results['locked_tables'])
            results['operations'].extend(sql_results['operations'])

    results['locked_tables'] = list(results['locked_tables'])
    results['locked_count'] = len(results['locked_tables'])
    results['multiple_locks'] = results['locked_count'] >= 2
    results['critical_risk'] = results['locked_count'] >= 3

    # ‚ö†Ô∏è –û–°–ù–û–í–ù–û–ï –ü–†–ê–í–ò–õ–û: –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–º–∏—Ç –µ—Å–ª–∏ 2+ –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü
    results['should_block_commit'] = results['locked_count'] >= 2

    return results


def convert_model_to_table(model_name, app_name=None):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏–º—è –º–æ–¥–µ–ª–∏ Django –≤ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î"""
    table_name = model_name.lower()
    if app_name:
        table_name = f"{app_name}_{table_name}"
    return table_name


def extract_sql_from_runsql(sql_block):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç SQL —Ç–µ–∫—Å—Ç –∏–∑ –±–ª–æ–∫–∞ RunSQL"""
    if isinstance(sql_block, str):
        sql_block = ' '.join(sql_block.split())
        if sql_block.startswith(('"', "'")):
            sql_text = sql_block[1:-1].replace('\\"', '"').replace("\\'", "'")
            return sql_text
        elif sql_block.startswith('['):
            try:
                import ast
                sql_list = ast.literal_eval(sql_block)
                if isinstance(sql_list, list) and len(sql_list) > 0:
                    return sql_list[0]
            except:
                pass
    return sql_block


def analyze_raw_sql(sql_text, tables, verbose=False):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—ã—Ä–æ–π SQL –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü"""
    results = {
        'locked_tables': set(),
        'operations': []
    }

    tables_lower = [table.lower() for table in tables]

    lock_patterns = [
        (r'ALTER\s+TABLE\s+[`"]?([\w_]+)[`"]?\s+', 'ALTER TABLE', 'high'),
        (r'CREATE\s+(UNIQUE\s+)?INDEX\s+.*?\s+ON\s+[`"]?([\w_]+)[`"]?', 'CREATE INDEX', 'high'),
        (r'DROP\s+INDEX\s+.*?\s+ON\s+[`"]?([\w_]+)[`"]?', 'DROP INDEX', 'high'),
        (r'TRUNCATE\s+TABLE\s+[`"]?([\w_]+)[`"]?', 'TRUNCATE TABLE', 'high'),
        (r'DROP\s+TABLE\s+[`"]?([\w_]+)[`"]?', 'DROP TABLE', 'high'),
        (r'UPDATE\s+[`"]?([\w_]+)[`"]?\s+SET\s+(?!.*WHERE)', 'UPDATE –±–µ–∑ WHERE', 'high'),
        (r'DELETE\s+FROM\s+[`"]?([\w_]+)[`"]?\s+(?!WHERE)', 'DELETE –±–µ–∑ WHERE', 'high'),
    ]

    for pattern, operation_type, risk_level in lock_patterns:
        matches = re.finditer(pattern, sql_text, re.IGNORECASE)
        for match in matches:
            for group in match.groups():
                if group and group.lower() in tables_lower:
                    results['locked_tables'].add(group)
                    results['operations'].append({
                        'django_operation': 'RunSQL',
                        'sql_operation': operation_type,
                        'table_name': group,
                        'sql_snippet': match.group(0)[:100],
                        'description': f"RunSQL -> {operation_type}",
                        'risk_level': risk_level
                    })
                    break

    results['locked_tables'] = list(results['locked_tables'])
    return results


def check_migration_files(filenames, tables, app_name, min_tables, verbose, strict=True):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π"""
    migration_files = [f for f in filenames if is_migration_file(f)]

    if not migration_files:
        if verbose:
            print("üìù –§–∞–π–ª—ã –º–∏–≥—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
        return True, []  # ‚úÖ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–π

    all_passed = True
    critical_migrations = []

    print(f"üîç Pre-commit: –ø—Ä–æ–≤–µ—Ä–∫–∞ {len(migration_files)} –º–∏–≥—Ä–∞—Ü–∏–π –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü")
    print(f"üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–º —Ç–∞–±–ª–∏—Ü—ã: {', '.join(tables)}")
    print(f"üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê –∫–æ–º–º–∏—Ç–∞ –ø—Ä–∏: {min_tables}+ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö")
    print("-" * 60)

    for migration_file in migration_files:
        content = read_migration_file(migration_file)
        if content is None:
            continue

        results = parse_django_migration_operations(content, tables, app_name, verbose)

        # ‚ö†Ô∏è –û–°–ù–û–í–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –±–ª–æ–∫–∏—Ä—É–µ–º –µ—Å–ª–∏ 2+ —Ç–∞–±–ª–∏—Ü
        if results['should_block_commit']:
            all_passed = False
            critical_migrations.append({
                'file': migration_file,
                'locked_tables': results['locked_tables'],
                'locked_count': results['locked_count'],
                'operations': results['operations']
            })

            print(f"‚ùå {migration_file}")
            print(f"   üö® –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–û {results['locked_count']} –ë–û–õ–¨–®–ò–• –¢–ê–ë–õ–ò–¶: {', '.join(results['locked_tables'])}")

            if verbose and results['operations']:
                print("   üìã –û–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:")
                for op in results['operations']:
                    if op['table_name'] in results['locked_tables']:
                        print(f"     ‚Ä¢ {op['description']} -> {op['table_name']}")
        else:
            status = "‚úÖ OK" if results['locked_count'] == 0 else "‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ (1 —Ç–∞–±–ª–∏—Ü–∞)"
            print(f"{status} {migration_file} - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Ç–∞–±–ª–∏—Ü: {results['locked_count']}")

    # –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤
    print("-" * 60)
    if critical_migrations:
        print(f"üö´ –ö–û–ú–ú–ò–¢ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù!")
        print(f"üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ ({len(critical_migrations)}):")

        for mig in critical_migrations:
            print(f"\n   üìÅ {mig['file']}")
            print(f"   üìä –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Ç–∞–±–ª–∏—Ü: {mig['locked_count']}")
            print(f"   üóÇÔ∏è  –¢–∞–±–ª–∏—Ü—ã: {', '.join(mig['locked_tables'])}")

            if verbose:
                print("   ‚ö†Ô∏è  –û–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:")
                for op in mig['operations']:
                    if op['table_name'] in mig['locked_tables']:
                        print(f"     ‚Ä¢ {op['description']}")

        print(f"\nüí° –ö–ê–ö –ò–°–ü–†–ê–í–ò–¢–¨:")
        print("   1. –†–∞–∑–±–µ–π—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π")
        print("   2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `Atomic = False` –≤ –∫–ª–∞—Å—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏")
        print("   3. –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤ —Ä–∞–∑–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏—è—Ö")
        print("   4. –î–ª—è —Å—Ä–æ—á–Ω—ã—Ö —Ñ–∏–∫—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: git commit --no-verify")
        print("\nüîí –ö–æ–º–º–∏—Ç –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù –∏–∑-–∑–∞ —Ä–∏—Å–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –ë–î!")

    else:
        print("‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É! –ö–æ–º–º–∏—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω.")

    return all_passed, critical_migrations


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    args = parse_arguments()

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = load_config(args.config) if args.config else {}

    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π (–∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    tables = args.tables
    app_name = args.app or config.get('app')
    min_tables = args.min_tables
    verbose = args.verbose
    strict = args.strict

    if not args.filenames:
        if verbose:
            print("üìù No files provided for checking")
        return 0

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π
    success, critical_migrations = check_migration_files(
        args.filenames, tables, app_name, min_tables, verbose, strict
    )

    # ‚ö†Ô∏è –í–û–ó–í–†–ê–©–ê–ï–ú –û–®–ò–ë–ö–£ –ï–°–õ–ò –ù–ê–ô–î–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ú–ò–ì–†–ê–¶–ò–ò
    if critical_migrations:
        print(f"\n‚ùå Pre-commit hook FAILED: –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ {len(critical_migrations)} –º–∏–≥—Ä–∞—Ü–∏–π")
        return 1  # ‚ö†Ô∏è –ë–õ–û–ö–ò–†–£–ï–ú –ö–û–ú–ú–ò–¢

    return 0  # ‚úÖ –†–ê–ó–†–ï–®–ê–ï–ú –ö–û–ú–ú–ò–¢


if __name__ == "__main__":
    sys.exit(main())